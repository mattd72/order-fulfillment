<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans                        http://www.springframework.org/schema/beans/spring-beans.xsd                              http://camel.apache.org/schema/spring                                     http://camel.apache.org/schema/spring/camel-spring.xsd">
    <!-- Discovers the ActiveMQ service dynamically -->
    <bean class="org.apache.activemq.ActiveMQSslConnectionFactory" id="jmsSslConnectionFactory">
        <property name="brokerURL" value="${activemq.broker.url}"/>
        <property name="userName" value="${activemq.broker.username}"/>
        <property name="password" value="${activemq.broker.password}"/>
        <property name="keyStore" value="${activemq.broker.keystore}"/>
        <property name="keyStorePassword" value="${activemq.broker.keystorePassword}"/>
        <property name="trustStore" value="${activemq.broker.truststore}"/>
        <property name="trustStorePassword" value="${activemq.broker.truststorePassword}"/>
    </bean>
    <bean class="org.apache.camel.component.jms.JmsConfiguration" id="jmsConfig">
        <property name="connectionFactory" ref="jmsSslConnectionFactory"/>
        <property name="concurrentConsumers" value="10"/>
    </bean>
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="activemq">
        <property name="configuration" ref="jmsConfig"/>
    </bean>
    <!-- Bean with helper methods for generating an order fulfillment number -->
    <bean class="org.example.utils.UtilsBean" id="UtilsBean">
        <property name="hmacKey" value="Abcd1234"/>
    </bean>
    <camelContext id="order-fulfillment" xmlns="http://camel.apache.org/schema/spring">
        <!-- Route to inject test files into JMS -->
        <route id="InjectOrderRequest">
            <from id="_from1" uri="file:/src/data?noop=true"/>
            <to id="_to3" uri="activemq:incoming.order.request"/>
        </route>
        <!-- Process an incoming order request XML record -->
        <route id="ProcessOrderRequest">
            <from id="_from2" uri="activemq:incoming.order.request"/>
            <onException id="_onException1" useOriginalMessage="true">
                <exception>org.apache.camel.ValidationException</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <log id="_log3" message="Incoming order request XML is invalid.  Error is ${exception.message}. Message contents: ${body}"/>
                <setHeader headerName="errorMessage" id="_setHeader2">
                    <simple>${exception.message}</simple>
                </setHeader>
                <to id="_to4" uri="activemq:error.order.request"/>
            </onException>
            <to id="_to5" uri="validator:request.xsd"/>
            <setHeader headerName="hardwareItems" id="_setHeader1">
                <simple>${properties:hardware.items}</simple>
            </setHeader>
            <setHeader headerName="electricalItems" id="_setHeader3">
                <simple>${properties:electrical.items}</simple>
            </setHeader>
            <setHeader headerName="itemName" id="_setHeader4">
                <xpath resultType="java.lang.String">/order/itemName</xpath>
            </setHeader>
            <choice id="_choice1">
                <when id="_when1">
                    <simple>${header.itemName} in ${header.hardwareItems}</simple>
                    <log id="_log4" message="Hardware Item Detected"/>
                    <to id="_to6" uri="activemq:hardware.fulfillment"/>
                </when>
                <when id="_when2">
                    <simple>${header.itemName} in ${header.electricalItems}</simple>
                    <log id="_log5" message="Electrical Item Detected"/>
                    <to id="_to7" uri="activemq:electrical.fulfillment"/>
                </when>
                <otherwise id="_otherwise1">
                    <log id="_log2" message="Third-Party Item Detected"/>
                    <to id="_to2" uri="activemq:thirdparty.fulfillment"/>
                </otherwise>
            </choice>
        </route>
    </camelContext>
</beans>
